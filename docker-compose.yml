version: '3.8'

services:
  # Main AI-Guided Penetration Testing API with CrewAI
  pentest-ai:
    build: 
      context: .
      dockerfile: Dockerfile.crewai
    container_name: pentest-ai-app
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/crewai_pentest}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://ollama:11434}
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./reports:/app/reports
    depends_on:
      - mongo
      - ollama
    restart: unless-stopped
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ollama AI Model Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-service
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: mongodb-pentest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-secure_password_123}
      - MONGO_INITDB_DATABASE=crewai_pentest
    volumes:
      - mongo_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express - Web-based MongoDB admin interface
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express-pentest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USERNAME:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD:-secure_password_123}
      - ME_CONFIG_MONGODB_URL=mongodb://admin:secure_password_123@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD:-admin}
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - pentest-network

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: redis-pentest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    restart: unless-stopped
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: nginx-pentest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - pentest-ai
    restart: unless-stopped
    networks:
      - pentest-network

volumes:
  mongo_data:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local

networks:
  pentest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
