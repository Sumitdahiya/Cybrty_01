#!/usr/bin/env python3
"""
Full Penetration Test on https://cybrty.com
This script performs a comprehensive penetration test using the PenTest AI API
"""

import requests
import json
import time
from datetime import datetime
import sys

API_BASE = "http://localhost:8000"
TARGET = "cybrty.com"

def print_banner():
    """Print test banner"""
    print("=" * 80)
    print("🎯 COMPREHENSIVE PENETRATION TEST")
    print("=" * 80)
    print(f"🌐 Target: https://{TARGET}")
    print(f"🕒 Started: {datetime.now()}")
    print(f"🔧 API Endpoint: {API_BASE}")
    print("=" * 80)

def test_api_connection():
    """Test if API is available"""
    print("\n📡 Testing API Connection...")
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            print("✅ API Server is operational")
            return True
        else:
            print(f"❌ API Server returned status {response.status_code}")
            return False
    except Exception as e:
        print(f"❌ Failed to connect to API: {e}")
        return False

def get_available_tools():
    """Get list of available penetration testing tools"""
    print("\n🔧 Getting Available Tools...")
    try:
        response = requests.get(f"{API_BASE}/tools", timeout=10)
        if response.status_code == 200:
            tools = response.json()
            print(f"✅ Found {len(tools)} available tools:")
            for tool in tools:
                print(f"   • {tool['name']}: {tool['description']}")
            return [tool['name'] for tool in tools]
        else:
            print(f"❌ Failed to get tools: {response.status_code}")
            return []
    except Exception as e:
        print(f"❌ Error getting tools: {e}")
        return []

def execute_individual_tools(tools):
    """Execute individual tools against the target"""
    print(f"\n🎯 Executing Individual Tools on {TARGET}...")
    results = {}
    
    # Key tools for web application testing
    priority_tools = ['nmap', 'nikto', 'zap', 'burp', 'sqlmap']
    
    for tool in priority_tools:
        if tool in tools:
            print(f"\n🔍 Executing {tool.upper()}...")
            try:
                payload = {
                    "target": TARGET,
                    "scope": "comprehensive",
                    "tools": [tool],
                    "additional_params": {
                        "comprehensive_scan": True,
                        "web_target": True
                    }
                }
                
                response = requests.post(
                    f"{API_BASE}/invokePentest",
                    json=payload,
                    timeout=120  # 2 minutes per tool
                )
                
                if response.status_code == 200:
                    result = response.json()
                    results[tool] = result
                    print(f"✅ {tool.upper()} completed successfully")
                    
                    # Show brief summary
                    if 'results' in result and 'tool_results' in result['results']:
                        tool_result = result['results']['tool_results'].get(tool, 'No specific output')
                        print(f"   📊 Result: {str(tool_result)[:200]}...")
                else:
                    print(f"❌ {tool.upper()} failed: HTTP {response.status_code}")
                    print(f"   Response: {response.text[:200]}...")
                    
            except Exception as e:
                print(f"❌ Error executing {tool}: {e}")
                
            # Brief pause between tools
            time.sleep(2)
    
    return results

def execute_comprehensive_pentest():
    """Execute the full penetration testing workflow"""
    print(f"\n🚀 Executing Comprehensive Penetration Test on {TARGET}...")
    
    try:
        payload = {
            "target": TARGET,
            "scope": "comprehensive",
            "agents": ["recon", "vulnerability", "exploitation", "reporting"],
            "additional_params": {
                "web_application_test": True,
                "domain_enumeration": True,
                "vulnerability_assessment": True,
                "safe_exploitation": True,
                "comprehensive_reporting": True
            }
        }
        
        print("📝 Payload:")
        print(json.dumps(payload, indent=2))
        
        print("\n⏳ Executing comprehensive pentest (this may take several minutes)...")
        response = requests.post(
            f"{API_BASE}/invokePentest",
            json=payload,
            timeout=600  # 10 minutes timeout
        )
        
        if response.status_code == 200:
            result = response.json()
            print("✅ Comprehensive penetration test completed successfully!")
            
            # Extract session ID if available
            session_id = None
            if 'results' in result and 'session_id' in result['results']:
                session_id = result['results']['session_id']
                print(f"📝 Session ID: {session_id}")
            
            return result, session_id
        else:
            print(f"❌ Comprehensive pentest failed: HTTP {response.status_code}")
            print(f"Response: {response.text}")
            return None, None
            
    except Exception as e:
        print(f"❌ Error executing comprehensive pentest: {e}")
        return None, None

def get_session_analytics(session_id):
    """Get analytics for the penetration test session"""
    if not session_id:
        print("\n⚠️  No session ID available for analytics")
        return
    
    print(f"\n📊 Getting Session Analytics for {session_id}...")
    
    try:
        # Get session summary
        response = requests.get(f"{API_BASE}/sessions/{session_id}/summary", timeout=30)
        if response.status_code == 200:
            summary = response.json()
            print("✅ Session Summary:")
            print(json.dumps(summary, indent=2))
        else:
            print(f"❌ Failed to get session summary: {response.status_code}")
    except Exception as e:
        print(f"❌ Error getting session analytics: {e}")

def get_database_statistics():
    """Get MongoDB database statistics"""
    print("\n💾 Getting Database Statistics...")
    
    try:
        response = requests.get(f"{API_BASE}/database/stats", timeout=30)
        if response.status_code == 200:
            stats = response.json()
            print("✅ Database Statistics:")
            print(json.dumps(stats, indent=2))
        else:
            print(f"❌ Failed to get database stats: {response.status_code}")
    except Exception as e:
        print(f"❌ Error getting database statistics: {e}")

def get_recent_agent_actions():
    """Get recent agent actions from the database"""
    print("\n🤖 Getting Recent Agent Actions...")
    
    try:
        response = requests.get(f"{API_BASE}/agents/actions?limit=10", timeout=30)
        if response.status_code == 200:
            actions = response.json()
            print(f"✅ Found {actions['total_count']} agent actions")
            print("Recent actions:")
            for action in actions['agent_actions'][:5]:
                print(f"   • {action['agent_role']}: {action['action_type']} at {action['timestamp']}")
        else:
            print(f"❌ Failed to get agent actions: {response.status_code}")
    except Exception as e:
        print(f"❌ Error getting agent actions: {e}")

def main():
    """Main test execution"""
    print_banner()
    
    # Step 1: Test API connection
    if not test_api_connection():
        print("❌ Cannot proceed without API connection")
        sys.exit(1)
    
    # Step 2: Get available tools
    tools = get_available_tools()
    if not tools:
        print("❌ No tools available")
        sys.exit(1)
    
    # Step 3: Execute individual tools (quick tests)
    print("\n" + "="*60)
    print("🔧 PHASE 1: INDIVIDUAL TOOL EXECUTION")
    print("="*60)
    individual_results = execute_individual_tools(tools)
    
    # Step 4: Execute comprehensive penetration test
    print("\n" + "="*60)
    print("🎯 PHASE 2: COMPREHENSIVE PENETRATION TEST")
    print("="*60)
    comprehensive_result, session_id = execute_comprehensive_pentest()
    
    # Step 5: Get analytics and statistics
    print("\n" + "="*60)
    print("📊 PHASE 3: ANALYTICS AND REPORTING")
    print("="*60)
    
    if session_id:
        get_session_analytics(session_id)
    
    get_database_statistics()
    get_recent_agent_actions()
    
    # Final summary
    print("\n" + "="*80)
    print("✅ FULL PENETRATION TEST COMPLETED")
    print("="*80)
    print(f"🎯 Target: {TARGET}")
    print(f"🕒 Completed: {datetime.now()}")
    print(f"🔧 Individual tools executed: {len(individual_results)}")
    print(f"🚀 Comprehensive test: {'✅ Success' if comprehensive_result else '❌ Failed'}")
    print(f"📝 Session ID: {session_id or 'N/A'}")
    print("\n📋 All results have been logged to MongoDB for detailed analysis")
    print("💡 Check the API endpoints for detailed tool outputs and agent actions")
    print("="*80)

if __name__ == "__main__":
    main()
