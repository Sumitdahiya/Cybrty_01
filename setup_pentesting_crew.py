#!/usr/bin/env python3
"""
Setup Pentesting Crew and Cybersecurity Mission

This script creates a comprehensive penetration testing crew with specialized agents
and sets up a mission for a single cybersecurity platform assessment.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from mongodb_integration import CrewAIMongoDB
import json
from datetime import datetime

def create_pentesting_crew():
    """Create a comprehensive penetration testing crew"""
    
    mongo = CrewAIMongoDB()
    print("🎯 Setting up Pentesting Crew for Cybersecurity Platform Assessment")
    
    # Define specialized pentesting agents
    agents_data = [
        {
            "role": "Reconnaissance Specialist",
            "goal": "Gather comprehensive intelligence about target infrastructure, domains, and attack surface",
            "backstory": "Expert in passive and active reconnaissance with 10+ years of experience in information gathering and OSINT. Specializes in mapping organizational infrastructure and identifying entry points.",
            "tools": "nmap,masscan,amass,subfinder,gobuster,dirb,whatweb,theharvester",
            "allowDelegation": False,
            "verbose": True,
            "image": "recon_agent.png",
            "specialization": "Information Gathering",
            "skill_level": "Expert",
            "primary_tasks": ["Network Discovery", "Subdomain Enumeration", "Port Scanning", "Service Identification"]
        },
        {
            "role": "Vulnerability Assessment Expert",
            "goal": "Identify, analyze, and prioritize security vulnerabilities across web applications, networks, and systems",
            "backstory": "Senior security researcher with expertise in vulnerability assessment methodologies. Certified in OWASP testing and CVE analysis with deep knowledge of exploit development.",
            "tools": "nessus,openvas,nikto,sqlmap,burpsuite,owasp-zap,wpscan,nuclei",
            "allowDelegation": True,
            "verbose": True,
            "image": "vuln_agent.png",
            "specialization": "Vulnerability Analysis",
            "skill_level": "Expert",
            "primary_tasks": ["Web App Scanning", "Network Vulnerability Assessment", "Database Testing", "CMS Scanning"]
        },
        {
            "role": "Network Penetration Tester",
            "goal": "Perform comprehensive network-level penetration testing including internal and external network assessments",
            "backstory": "Advanced penetration tester specializing in network security, lateral movement, and privilege escalation. Expert in Windows and Linux exploitation techniques.",
            "tools": "metasploit,cobalt-strike,enum4linux,smbclient,responder,bloodhound,crackmapexec,impacket",
            "allowDelegation": True,
            "verbose": True,
            "image": "network_agent.png",
            "specialization": "Network Penetration",
            "skill_level": "Expert",
            "primary_tasks": ["SMB Enumeration", "Active Directory Testing", "Lateral Movement", "Privilege Escalation"]
        },
        {
            "role": "Web Application Security Analyst",
            "goal": "Conduct thorough security assessments of web applications, APIs, and web services",
            "backstory": "Web application security specialist with deep knowledge of OWASP Top 10, API security, and modern web technologies. Expert in manual and automated testing techniques.",
            "tools": "burpsuite,owasp-zap,sqlmap,xsshunter,commix,wfuzz,ffuf,postman",
            "allowDelegation": False,
            "verbose": True,
            "image": "webapp_agent.png",
            "specialization": "Web Application Security",
            "skill_level": "Expert",
            "primary_tasks": ["SQL Injection Testing", "XSS Detection", "API Security Testing", "Authentication Bypass"]
        },
        {
            "role": "Social Engineering Specialist",
            "goal": "Assess human factors in cybersecurity through phishing simulations and social engineering tests",
            "backstory": "Social engineering expert with psychology background. Specializes in phishing campaigns, pretexting, and security awareness assessment.",
            "tools": "setoolkit,gophish,king-phisher,maltego,recon-ng,shodan",
            "allowDelegation": False,
            "verbose": True,
            "image": "social_agent.png",
            "specialization": "Social Engineering",
            "skill_level": "Advanced",
            "primary_tasks": ["Phishing Campaigns", "OSINT Gathering", "Pretext Development", "Human Factor Analysis"]
        },
        {
            "role": "Wireless Security Auditor",
            "goal": "Evaluate wireless network security including WiFi, Bluetooth, and RF communications",
            "backstory": "RF security specialist with expertise in wireless protocols, encryption analysis, and radio frequency attacks. Certified in wireless security standards.",
            "tools": "aircrack-ng,kismet,reaver,bettercap,hcxtools,wifite,bluesnarfer,rtl-sdr",
            "allowDelegation": False,
            "verbose": True,
            "image": "wireless_agent.png",
            "specialization": "Wireless Security",
            "skill_level": "Advanced",
            "primary_tasks": ["WiFi Security Assessment", "Bluetooth Testing", "RF Analysis", "Wireless Encryption Testing"]
        },
        {
            "role": "Report Generation Coordinator",
            "goal": "Compile comprehensive penetration testing reports with executive summaries, technical details, and remediation guidance",
            "backstory": "Technical writing specialist with cybersecurity background. Expert in translating complex technical findings into actionable business insights and detailed technical reports.",
            "tools": "reporting-tools,risk-calculator,cvss-calculator,documentation-suite",
            "allowDelegation": True,
            "verbose": True,
            "image": "report_agent.png",
            "specialization": "Security Reporting",
            "skill_level": "Expert",
            "primary_tasks": ["Executive Reporting", "Technical Documentation", "Risk Assessment", "Remediation Planning"]
        }
    ]
    
    # Create agents and store their IDs
    agent_ids = []
    print("\n🤖 Creating Specialized Pentesting Agents:")
    
    for i, agent_data in enumerate(agents_data, 1):
        agent_id = mongo.create_agent(agent_data)
        agent_ids.append(agent_id)
        print(f"   ✅ Agent {i}: {agent_data['role']} (ID: {agent_id})")
    
    return mongo, agent_ids

def create_cybersecurity_mission(mongo, agent_ids):
    """Create a comprehensive cybersecurity platform assessment mission"""
    
    # Define the comprehensive mission
    mission_data = {
        "name": "Comprehensive Cybersecurity Platform Assessment",
        "description": "Full-scale security assessment of a cybersecurity platform including web applications, APIs, network infrastructure, and security controls",
        "target": "cybersecurity-platform.company.com",
        "scope": {
            "ip_ranges": ["203.0.113.0/24", "198.51.100.0/24"],
            "domains": ["cybersecurity-platform.company.com", "api.cybersecurity-platform.company.com", "admin.cybersecurity-platform.company.com"],
            "applications": ["Main Platform", "Admin Portal", "API Gateway", "Customer Dashboard"],
            "exclusions": ["production-db.internal.company.com", "backup-systems.company.com"]
        },
        "agent_ids": agent_ids,
        "timeline": {
            "start_date": datetime.utcnow().isoformat(),
            "estimated_duration": "14 days",
            "phases": [
                {"phase": "Reconnaissance", "duration": "2 days"},
                {"phase": "Vulnerability Assessment", "duration": "4 days"},
                {"phase": "Penetration Testing", "duration": "6 days"},
                {"phase": "Reporting", "duration": "2 days"}
            ]
        },
        "tasks": json.dumps([
            {
                "id": 1,
                "name": "External Reconnaissance",
                "description": "Passive information gathering about target organization and infrastructure",
                "assigned_agent": "Reconnaissance Specialist",
                "tools": ["amass", "subfinder", "theharvester", "shodan"],
                "deliverables": ["Subdomain list", "IP ranges", "Technology stack", "Employee information"],
                "priority": "High",
                "estimated_hours": 16
            },
            {
                "id": 2,
                "name": "Network Discovery and Port Scanning",
                "description": "Active scanning to identify live hosts, open ports, and running services",
                "assigned_agent": "Reconnaissance Specialist",
                "tools": ["nmap", "masscan", "whatweb"],
                "deliverables": ["Live hosts inventory", "Open ports list", "Service fingerprints"],
                "priority": "High",
                "estimated_hours": 12,
                "depends_on": [1]
            },
            {
                "id": 3,
                "name": "Web Application Vulnerability Assessment",
                "description": "Comprehensive security testing of all web applications and interfaces",
                "assigned_agent": "Web Application Security Analyst",
                "tools": ["burpsuite", "owasp-zap", "sqlmap", "nikto"],
                "deliverables": ["Web vulnerabilities report", "OWASP Top 10 analysis", "Authentication flaws"],
                "priority": "Critical",
                "estimated_hours": 32,
                "depends_on": [2]
            },
            {
                "id": 4,
                "name": "API Security Testing",
                "description": "Security assessment of REST APIs, GraphQL endpoints, and web services",
                "assigned_agent": "Web Application Security Analyst",
                "tools": ["postman", "burpsuite", "ffuf", "wfuzz"],
                "deliverables": ["API security report", "Endpoint vulnerabilities", "Authorization flaws"],
                "priority": "High",
                "estimated_hours": 24,
                "depends_on": [3]
            },
            {
                "id": 5,
                "name": "Network Infrastructure Penetration Testing",
                "description": "Deep network-level security testing including SMB, RDP, and other network services",
                "assigned_agent": "Network Penetration Tester",
                "tools": ["metasploit", "enum4linux", "crackmapexec", "impacket"],
                "deliverables": ["Network exploitation report", "Lateral movement paths", "Privilege escalation"],
                "priority": "Critical",
                "estimated_hours": 40,
                "depends_on": [2]
            },
            {
                "id": 6,
                "name": "Automated Vulnerability Scanning",
                "description": "Comprehensive automated scanning using enterprise-grade vulnerability scanners",
                "assigned_agent": "Vulnerability Assessment Expert",
                "tools": ["nessus", "openvas", "nuclei"],
                "deliverables": ["Vulnerability scan reports", "Risk prioritization", "Patch recommendations"],
                "priority": "High",
                "estimated_hours": 16,
                "depends_on": [2]
            },
            {
                "id": 7,
                "name": "Social Engineering Assessment",
                "description": "Phishing simulation and social engineering testing against organization employees",
                "assigned_agent": "Social Engineering Specialist",
                "tools": ["gophish", "setoolkit", "maltego"],
                "deliverables": ["Phishing campaign results", "Social engineering report", "Awareness recommendations"],
                "priority": "Medium",
                "estimated_hours": 20,
                "depends_on": [1]
            },
            {
                "id": 8,
                "name": "Wireless Security Assessment",
                "description": "WiFi and wireless infrastructure security testing if applicable",
                "assigned_agent": "Wireless Security Auditor",
                "tools": ["aircrack-ng", "kismet", "bettercap"],
                "deliverables": ["Wireless security report", "WiFi vulnerabilities", "RF analysis"],
                "priority": "Medium",
                "estimated_hours": 16,
                "depends_on": [1]
            },
            {
                "id": 9,
                "name": "Post-Exploitation and Persistence",
                "description": "Advanced persistence techniques and data exfiltration simulation",
                "assigned_agent": "Network Penetration Tester",
                "tools": ["metasploit", "cobalt-strike", "bloodhound"],
                "deliverables": ["Persistence report", "Data access demonstration", "Impact assessment"],
                "priority": "Critical",
                "estimated_hours": 24,
                "depends_on": [5]
            },
            {
                "id": 10,
                "name": "Executive Summary and Technical Report",
                "description": "Comprehensive reporting with executive summary and detailed technical findings",
                "assigned_agent": "Report Generation Coordinator",
                "tools": ["reporting-tools", "risk-calculator"],
                "deliverables": ["Executive summary", "Technical report", "Remediation roadmap", "Risk matrix"],
                "priority": "Critical",
                "estimated_hours": 32,
                "depends_on": [3, 4, 5, 6, 7, 8, 9]
            }
        ]),
        "methodology": "OWASP WSTG + NIST SP 800-115 + PTES",
        "compliance_frameworks": ["ISO 27001", "SOC 2", "PCI DSS"],
        "process": "SEQUENTIAL",
        "risk_tolerance": "Zero tolerance for critical vulnerabilities",
        "success_criteria": [
            "Complete assessment of all in-scope systems",
            "Identification of critical and high-risk vulnerabilities",
            "Successful demonstration of exploitable vulnerabilities",
            "Comprehensive remediation guidance",
            "Executive and technical reporting"
        ]
    }
    
    # Create the mission
    mission_id = mongo.create_mission(mission_data)
    print(f"\n🚀 Created Comprehensive Mission: {mission_id}")
    print(f"   📋 Mission: {mission_data['name']}")
    print(f"   🎯 Target: {mission_data['target']}")
    print(f"   ⏱️  Duration: {mission_data['timeline']['estimated_duration']}")
    print(f"   👥 Agents: {len(agent_ids)} specialized agents")
    print(f"   📝 Tasks: {len(json.loads(mission_data['tasks']))} detailed tasks")
    
    return mission_id

def display_mission_summary(mongo, mission_id):
    """Display a summary of the created mission"""
    
    mission = mongo.get_mission(mission_id)
    tasks = json.loads(mission['tasks'])
    
    print("\n" + "="*80)
    print("  CYBERSECURITY PLATFORM ASSESSMENT MISSION SUMMARY")
    print("="*80)
    
    print(f"\n📌 Mission ID: {mission_id}")
    print(f"🎯 Target Platform: {mission['target']}")
    print(f"📅 Timeline: {mission['timeline']['estimated_duration']}")
    print(f"📋 Methodology: {mission['methodology']}")
    
    print(f"\n🔍 Assessment Scope:")
    scope = mission['scope']
    print(f"   • IP Ranges: {', '.join(scope['ip_ranges'])}")
    print(f"   • Domains: {', '.join(scope['domains'])}")
    print(f"   • Applications: {', '.join(scope['applications'])}")
    
    print(f"\n📊 Mission Statistics:")
    total_hours = sum(task.get('estimated_hours', 0) for task in tasks)
    print(f"   • Total Tasks: {len(tasks)}")
    print(f"   • Estimated Hours: {total_hours}")
    print(f"   • Critical Tasks: {len([t for t in tasks if t.get('priority') == 'Critical'])}")
    print(f"   • High Priority Tasks: {len([t for t in tasks if t.get('priority') == 'High'])}")
    
    print(f"\n🎯 Key Assessment Areas:")
    for i, task in enumerate(tasks[:5], 1):  # Show first 5 tasks
        print(f"   {i}. {task['name']} ({task.get('estimated_hours', 0)}h)")
    
    print(f"\n✅ Success Criteria:")
    for criteria in mission['success_criteria']:
        print(f"   • {criteria}")

def main():
    """Main function to set up the pentesting crew and mission"""
    
    print("🔐 CrewAI Cybersecurity Platform Assessment Setup")
    print("=" * 60)
    
    try:
        # Create the pentesting crew
        mongo, agent_ids = create_pentesting_crew()
        
        # Create the cybersecurity mission
        mission_id = create_cybersecurity_mission(mongo, agent_ids)
        
        # Display mission summary
        display_mission_summary(mongo, mission_id)
        
        # Show database statistics
        print("\n📊 Updated Database Statistics:")
        stats = mongo.get_agent_stats()
        print(f"   • Total Agents: {stats['total_agents']}")
        print(f"   • Total Missions: {stats['total_missions']}")
        print(f"   • Tool Results: {stats['total_tool_results']}")
        
        print("\n🎉 Pentesting Crew and Mission Setup Complete!")
        print("    Access FastAPI: http://localhost:8000/docs")
        print(f"   🗄️  View MongoDB data: python view_mongodb_data.py")
        
        mongo.disconnect()
        
    except Exception as e:
        print(f"❌ Error during setup: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
