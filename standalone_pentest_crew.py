#!/usr/bin/env python3
"""
Standalone Penetration Testing Crew Setup

This script demonstrates the PentestCrew functionality without UI dependencies.
Focuses purely on the backend penetration testing capabilities.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agents.pentest_crew import PentestCrew
import asyncio
import json
from datetime import datetime

async def test_pentest_crew():
    """Test the standalone penetration testing crew"""
    
    print("🔒 Standalone Penetration Testing Crew")
    print("=" * 60)
    
    try:
        # Initialize the crew
        print("\n🤖 Initializing Penetration Testing Crew...")
        crew = PentestCrew()
        
        # Display available tools
        print(f"\n🔧 Available Tools:")
        tools = crew.get_available_tools()
        for tool in tools:
            print(f"   • {tool}")
        
        # Display agents
        print(f"\n👥 Available Agents:")
        for agent_key, agent in crew.agents.items():
            print(f"   • {agent.role} ({agent_key})")
        
        # Test individual tool execution
        print(f"\n🔍 Testing Individual Tool Execution:")
        test_target = "127.0.0.1"
        
        # Test nmap if available
        if "nmap" in tools:
            print(f"   Running nmap scan on {test_target}...")
            try:
                result = crew.execute_tool("nmap", test_target, ports="80,443,22")
                print(f"   ✅ Nmap scan completed")
                print(f"   📊 Result preview: {result[:200]}...")
            except Exception as e:
                print(f"   ❌ Nmap scan failed: {e}")
        
        # Test enum4linux if available
        if "enum4linux" in tools:
            print(f"   Running enum4linux scan on {test_target}...")
            try:
                result = crew.execute_tool("enum4linux", test_target)
                print(f"   ✅ Enum4linux scan completed")
                print(f"   📊 Result preview: {result[:200]}...")
            except Exception as e:
                print(f"   ❌ Enum4linux scan failed: {e}")
        
        # Test full crew execution
        print(f"\n🚀 Testing Full Crew Execution:")
        print(f"   Target: {test_target}")
        print(f"   Scope: basic")
        
        execution_start = datetime.now()
        
        results = await crew.execute_pentest(
            target=test_target,
            scope="basic",
            additional_params={
                "test_mode": True,
                "exclude_destructive": True
            }
        )
        
        execution_end = datetime.now()
        execution_time = (execution_end - execution_start).total_seconds()
        
        print(f"\n📊 Execution Results:")
        print(f"   • Status: {results.get('status', 'unknown')}")
        print(f"   • Execution Time: {execution_time:.2f} seconds")
        print(f"   • LLM Status: {results.get('llm_status', 'unknown')}")
        
        # Display findings
        findings = results.get('findings', {})
        if findings:
            print(f"\n🔍 Findings Summary:")
            for category, result in findings.items():
                print(f"   • {category.title()}: {result}")
        
        # Display additional info
        if results.get('note'):
            print(f"\n📝 Note: {results['note']}")
        
        # Check if results were saved to MongoDB
        mongodb_id = results.get('mongodb_id')
        if mongodb_id:
            print(f"\n💾 Results saved to MongoDB with ID: {mongodb_id}")
        else:
            print(f"\n⚠️  Results not saved to MongoDB (database may not be connected)")
        
        return True
        
    except Exception as e:
        print(f"❌ Error during crew testing: {e}")
        import traceback
        traceback.print_exc()
        return False

def display_system_info():
    """Display system and environment information"""
    
    print("\n🖥️  System Information:")
    print(f"   • Python Version: {sys.version.split()[0]}")
    print(f"   • Working Directory: {os.getcwd()}")
    print(f"   • Script Location: {__file__}")
    
    # Check for required modules
    print(f"\n📦 Module Availability:")
    
    try:
        import crewai
        print(f"   ✅ CrewAI: Available")
    except ImportError:
        print(f"   ❌ CrewAI: Not available")
    
    try:
        from models.ollama_manager import OllamaManager
        print(f"   ✅ Ollama Manager: Available")
    except ImportError:
        print(f"   ❌ Ollama Manager: Not available")
    
    try:
        from tools import ToolManager
        print(f"   ✅ Tool Manager: Available")
    except ImportError:
        print(f"   ❌ Tool Manager: Not available")

def display_usage_examples():
    """Display usage examples for the pentest crew"""
    
    print("\n💡 Usage Examples:")
    print("""
# Basic crew initialization
from agents.pentest_crew import PentestCrew
crew = PentestCrew()

# Get available tools
tools = crew.get_available_tools()
print(f"Available tools: {tools}")

# Execute individual tool
result = crew.execute_tool("nmap", "192.168.1.1", ports="80,443")
print(result)

# Execute full penetration test
results = crew.execute_pentest("192.168.1.100", scope="comprehensive")
print(results)

# Execute with custom parameters
results = crew.execute_pentest(
    target="example.com",
    scope="web", 
    parameters={"test_mode": False, "timeout": 300}
)
""")

async def main():
    """Main execution function"""
    
    print("🚀 Standalone Penetration Testing System")
    print("=" * 80)
    
    # Display system information
    display_system_info()
    
    # Test the crew
    success = await test_pentest_crew()
    
    # Display usage examples
    display_usage_examples()
    
    # Final status
    if success:
        print(f"\n✅ Standalone penetration testing crew is operational!")
        print(f"🔧 FastAPI Backend: http://localhost:8000")
        print(f"📖 API Documentation: http://localhost:8000/docs")
        print(f"🎯 Ready for penetration testing operations")
    else:
        print(f"\n❌ Crew testing failed. Check error messages above.")
    
    print(f"\n🔒 System Status: {'OPERATIONAL' if success else 'NEEDS ATTENTION'}")

if __name__ == "__main__":
    asyncio.run(main())
